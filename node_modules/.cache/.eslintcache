[{"/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/index.js":"1","/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/App.js":"2","/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/supabase.js":"3"},{"size":233,"mtime":1679681319614,"results":"4","hashOfConfig":"5"},{"size":8883,"mtime":1679830338677,"results":"6","hashOfConfig":"5"},{"size":436,"mtime":1679768279786,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"lfen6d",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":1,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/index.js",[],[],[],"/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/App.js",["19","20","21"],[],"import { useEffect, useState } from \"react\";\nimport supabase from \"./supabase\";\n\nimport \"./style.css\";\n\nconst CATEGORIES = [\n  { name: \"technology\", color: \"#3b82f6\" },\n  { name: \"science\", color: \"#16a34a\" },\n  { name: \"finance\", color: \"#ef4444\" },\n  { name: \"society\", color: \"#eab308\" },\n  { name: \"entertainment\", color: \"#db2777\" },\n  { name: \"health\", color: \"#14b8a6\" },\n  { name: \"history\", color: \"#f97316\" },\n  { name: \"news\", color: \"#8b5cf6\" },\n];\n\nconst initialFacts = [\n  {\n    id: 1,\n    text: \"React is being developed by Meta (formerly facebook)\",\n    source: \"https://opensource.fb.com/\",\n    category: \"technology\",\n    votesInteresting: 24,\n    votesMindblowing: 9,\n    votesFalse: 4,\n    createdIn: 2021,\n  },\n  {\n    id: 2,\n    text: \"Millennial dads spend 3 times as much time with their kids than their fathers spent with them. In 1982, 43% of fathers had never changed a diaper. Today, that number is down to 3%\",\n    source:\n      \"https://www.mother.ly/parenting/millennial-dads-spend-more-time-with-their-kids\",\n    category: \"society\",\n    votesInteresting: 11,\n    votesMindblowing: 2,\n    votesFalse: 0,\n    createdIn: 2019,\n  },\n  {\n    id: 3,\n    text: \"Lisbon is the capital of Portugal\",\n    source: \"https://en.wikipedia.org/wiki/Lisbon\",\n    category: \"society\",\n    votesInteresting: 8,\n    votesMindblowing: 3,\n    votesFalse: 1,\n    createdIn: 2015,\n  },\n];\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n\n  return (\n    <div>\n      <span style={{ fontSize: \"40px\" }}>{count}</span>\n      <button className=\"btn btn-large\" onClick={() => setCount((c) => c + 1)}>\n        +1\n      </button>\n    </div>\n  );\n}\n\nfunction App() {\n  const [showForm, setShowForm] = useState(false);\n  const [facts, setFacts] = useState([]);\n  const [isloading, setIsLoading] = useState(false);\n  const [currentCategory, setCurrentCategory] = useState(\"all\");\n\n  useEffect(\n    function () {\n      async function getFacts() {\n        setIsLoading(true);\n\n        let query = supabase.from(\"facts\").select(\"*\");\n        if (currentCategory !== \"all\") {\n          query = query.eq(\"category\", currentCategory);\n        }\n        const { data: facts, error } = await query\n          .order(\"votesInteresting\", { ascending: false })\n          .limit(1000);\n\n        if (!error) setFacts(facts);\n        else alert(\"Oops there was a problem getting data\");\n        setIsLoading(false);\n      }\n      getFacts();\n    },\n    [currentCategory]\n  );\n  return (\n    <>\n      <Header showForm={showForm} setShowForm={setShowForm} />\n      {showForm ? (\n        <NewFactForm setFacts={setFacts} setShowForm={setShowForm} />\n      ) : null}\n\n      <main className=\"main\">\n        <CategoryFilter setCurrentCategory={setCurrentCategory} />\n        {isloading ? (\n          <Loader />\n        ) : (\n          <FactList facts={facts} setFacts={setFacts} />\n        )}\n      </main>\n    </>\n  );\n}\n\nfunction Loader() {\n  return <p className=\"message\">Loading...</p>;\n}\n\nfunction Header({ showForm, setShowForm }) {\n  const appTitle = \"Knowledge Base\";\n  return (\n    <>\n      <header className=\"header\">\n        <div className=\"logo\">\n          <img src=\"KB.png\" alt=\"knowledge base logo\" height=\"65\" width=\"65\" />\n          <h1>{appTitle}</h1>\n        </div>\n        <button\n          className=\"btn btn-large btn-open\"\n          onClick={() => setShowForm((show) => !show)}\n        >\n          {showForm ? \"Close\" : \"Share a fact\"}\n        </button>\n      </header>\n    </>\n  );\n}\n\n//copied from stackoverflow\nfunction isValidHttpUrl(string) {\n  let url;\n  try {\n    url = new URL(string);\n  } catch (_) {\n    return false;\n  }\n  return url.protocol === \"http:\" || url.protocol === \"https:\";\n}\n\nfunction NewFactForm({ setFacts, setShowForm }) {\n  const [text, setText] = useState(\"\");\n  const [source, setSource] = useState(\"http://example.com\");\n  const [category, setCategory] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const textLength = text.length;\n\n  async function handleSubmit(e) {\n    // 1. prevent browser reload\n    e.preventDefault();\n\n    //2.If data is valid ,create a new fact\n\n    if (text && isValidHttpUrl(source) && category && textLength <= 200) {\n      //3.Create a new fact object\n\n      // const newFact = {\n      //   id: Math.round(Math.random() * 10000),\n      //   text,\n      //   source,\n      //   category,\n      //   votesInteresting: 0,\n      //   votesMindblowing: 0,\n      //   votesFalse: 0,\n      //   createdIn: new Date().getFullYear(),\n      // };\n\n      //3. upload fact to supabase and receive new fact object\n\n      setIsUploading(true);\n      const { data: newFact, error } = await supabase\n        .from(\"facts\")\n        .insert([{ text, source, category }])\n        .select();\n      setIsUploading(false);\n\n      //4.Add the new fact to the UI: add fact to state\n      if (!error) setFacts((facts) => [newFact[0], ...facts]);\n\n      //5. Reset input fields\n\n      setSource(\"\");\n      setCategory(\"\");\n      setText(\"\");\n\n      //6. close the form\n\n      setShowForm(false);\n    }\n  }\n\n  return (\n    <>\n      <form className=\"fact-form\" action=\"\" onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Share some facts\"\n          value={text}\n          onChange={(e) => setText(e.target.value)}\n          disabled={isUploading}\n        />\n        <span>{200 - textLength}</span>\n        <input\n          value={source}\n          onChange={(e) => setSource(e.target.value)}\n          type=\"text\"\n          placeholder=\"Source of the fact\"\n          disabled={isUploading}\n        />\n        <select\n          value={category}\n          onChange={(e) => setCategory(e.target.value)}\n          name=\"\"\n          id=\"\"\n          disabled={isUploading}\n        >\n          <option value=\"\">Choose category:</option>\n          {CATEGORIES.map((cat) => (\n            <option key={cat.name} value={cat.name}>\n              {cat.name.toUpperCase()}\n            </option>\n          ))}\n        </select>\n        <button className=\"btn btn-large\" disabled={isUploading}>\n          Post\n        </button>\n      </form>\n    </>\n  );\n}\n\nfunction CategoryFilter({ setCurrentCategory }) {\n  return (\n    <aside>\n      <ul>\n        <li className=\"category\">\n          <button\n            className=\"btn btn-all-categories \"\n            onClick={() => setCurrentCategory(\"all\")}\n          >\n            All\n          </button>\n        </li>\n        {CATEGORIES.map((cat) => (\n          <li key={cat.name} class=\"category\">\n            <button\n              className=\"btn btn-category\"\n              style={{ backgroundColor: cat.color }}\n              onClick={() => setCurrentCategory(cat.name)}\n            >\n              {cat.name}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </aside>\n  );\n}\n\nfunction FactList({ facts, setFacts }) {\n  if (facts.length === 0) {\n    return (\n      <p className=\"message\"> NO facts for this category yet! POST your own</p>\n    );\n  }\n\n  return (\n    <section>\n      <ul className=\"facts-list\">\n        {facts.map((fact) => (\n          <Fact key={fact.id} fact={fact} setFacts={setFacts} />\n        ))}\n      </ul>\n      <p>There are {facts.length} facts in the database. Add your own!</p>\n    </section>\n  );\n}\n\nfunction Fact({ fact, setFacts }) {\n  const [isUpdating, setIsUpdating] = useState(false);\n  const isDisputed =\n    fact.votesInteresting + fact.votesMindblowing < fact.votesFalse;\n  async function handleVote(columnName) {\n    setIsUpdating(true);\n    const { data: updatedFact, error } = await supabase\n      .from(\"facts\")\n      .update({ [columnName]: fact[columnName] + 1 })\n      .eq(\"id\", fact.id)\n      .select();\n    setIsUpdating(false);\n\n    if (!error)\n      setFacts((facts) =>\n        facts.map((f) => (f.id === fact.id ? updatedFact[0] : f))\n      );\n  }\n\n  return (\n    <li className=\"fact\">\n      <p>\n        {isDisputed ? <span className=\"disputed\">[May be FALSE]</span> : null}\n        {fact.text}\n        <a className=\"source\" href={fact.source} target=\"_blank\">\n          (Source)\n        </a>\n      </p>\n      <span\n        style={{\n          backgroundColor: CATEGORIES.find((cat) => cat.name === fact.category)\n            .color,\n        }}\n        className=\"tag\"\n      >\n        {fact.category}\n      </span>\n      <div className=\"reaction-buttons\">\n        <button\n          onClick={() => handleVote(\"votesInteresting\")}\n          disabled={isUpdating}\n        >\n          👍 {fact.votesInteresting}\n        </button>\n        <button\n          onClick={() => handleVote(\"votesMindblowing\")}\n          disabled={isUpdating}\n        >\n          🤯{fact.votesMindblowing}\n        </button>\n        <button onClick={() => handleVote(\"votesFalse\")} disabled={isUpdating}>\n          ⛔️{fact.votesFalse}\n        </button>\n      </div>\n    </li>\n  );\n}\n\nexport default App;\n","/home/devsarthak/Desktop/knowledge base/Knowledge-full-stack-app/src/supabase.js",[],[],{"ruleId":"22","severity":1,"message":"23","line":17,"column":7,"nodeType":"24","messageId":"25","endLine":17,"endColumn":19},{"ruleId":"22","severity":1,"message":"26","line":51,"column":10,"nodeType":"24","messageId":"25","endLine":51,"endColumn":17},{"ruleId":"27","severity":1,"message":"28","line":307,"column":9,"nodeType":"29","messageId":"30","endLine":307,"endColumn":66,"fix":"31"},"no-unused-vars","'initialFacts' is assigned a value but never used.","Identifier","unusedVar","'Counter' is defined but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"32","text":"33"},[8061,8061]," rel=\"noreferrer\""]